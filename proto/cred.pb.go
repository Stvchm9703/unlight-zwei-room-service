// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cred.proto

package proto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CredReq struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredReq) Reset()         { *m = CredReq{} }
func (m *CredReq) String() string { return proto.CompactTextString(m) }
func (*CredReq) ProtoMessage()    {}
func (*CredReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19cefea999b106e, []int{0}
}

func (m *CredReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CredReq.Unmarshal(m, b)
}
func (m *CredReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CredReq.Marshal(b, m, deterministic)
}
func (m *CredReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredReq.Merge(m, src)
}
func (m *CredReq) XXX_Size() int {
	return xxx_messageInfo_CredReq.Size(m)
}
func (m *CredReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CredReq.DiscardUnknown(m)
}

var xxx_messageInfo_CredReq proto.InternalMessageInfo

func (m *CredReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CredReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CredReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateCredResp struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	File                 []byte    `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	ErrorMsg             *ErrorMsg `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateCredResp) Reset()         { *m = CreateCredResp{} }
func (m *CreateCredResp) String() string { return proto.CompactTextString(m) }
func (*CreateCredResp) ProtoMessage()    {}
func (*CreateCredResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19cefea999b106e, []int{1}
}

func (m *CreateCredResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCredResp.Unmarshal(m, b)
}
func (m *CreateCredResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCredResp.Marshal(b, m, deterministic)
}
func (m *CreateCredResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCredResp.Merge(m, src)
}
func (m *CreateCredResp) XXX_Size() int {
	return xxx_messageInfo_CreateCredResp.Size(m)
}
func (m *CreateCredResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCredResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCredResp proto.InternalMessageInfo

func (m *CreateCredResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateCredResp) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CreateCredResp) GetErrorMsg() *ErrorMsg {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

type CheckCredResp struct {
	ResponseCode         int32     `protobuf:"varint,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	ErrorMsg             *ErrorMsg `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CheckCredResp) Reset()         { *m = CheckCredResp{} }
func (m *CheckCredResp) String() string { return proto.CompactTextString(m) }
func (*CheckCredResp) ProtoMessage()    {}
func (*CheckCredResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19cefea999b106e, []int{2}
}

func (m *CheckCredResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCredResp.Unmarshal(m, b)
}
func (m *CheckCredResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCredResp.Marshal(b, m, deterministic)
}
func (m *CheckCredResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCredResp.Merge(m, src)
}
func (m *CheckCredResp) XXX_Size() int {
	return xxx_messageInfo_CheckCredResp.Size(m)
}
func (m *CheckCredResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCredResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCredResp proto.InternalMessageInfo

func (m *CheckCredResp) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *CheckCredResp) GetErrorMsg() *ErrorMsg {
	if m != nil {
		return m.ErrorMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*CredReq)(nil), "RoomStatus.CredReq")
	proto.RegisterType((*CreateCredResp)(nil), "RoomStatus.CreateCredResp")
	proto.RegisterType((*CheckCredResp)(nil), "RoomStatus.CheckCredResp")
}

func init() { proto.RegisterFile("cred.proto", fileDescriptor_c19cefea999b106e) }

var fileDescriptor_c19cefea999b106e = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb5, 0x2e, 0xa1, 0xcd, 0x36, 0x09, 0xb0, 0xad, 0x44, 0x6a, 0x50, 0x14, 0x99, 0x0b,
	0x8a, 0x88, 0x37, 0x4d, 0x0f, 0x88, 0xdc, 0x8a, 0x41, 0x25, 0x87, 0x4a, 0xc1, 0xb4, 0x08, 0x71,
	0xa9, 0x1c, 0x67, 0xba, 0xb1, 0x6a, 0x7b, 0x97, 0xdd, 0x4d, 0xaa, 0x5c, 0x91, 0x78, 0x01, 0x90,
	0x78, 0x08, 0x9e, 0x82, 0x63, 0x8f, 0x48, 0xbc, 0x00, 0x4a, 0x79, 0x10, 0xb4, 0x9b, 0x34, 0x49,
	0x11, 0x48, 0x70, 0xf2, 0xfc, 0xf3, 0x8f, 0xbf, 0xdf, 0x1a, 0x0f, 0xc6, 0xb1, 0x84, 0x81, 0x2f,
	0x24, 0xd7, 0x9c, 0xe0, 0x90, 0xf3, 0xec, 0x95, 0x8e, 0xf4, 0x48, 0xb9, 0xf7, 0x18, 0xe7, 0x2c,
	0x05, 0x6a, 0x9d, 0xfe, 0xe8, 0x94, 0x42, 0x26, 0xf4, 0x64, 0x36, 0xe8, 0xde, 0x9f, 0x9b, 0x91,
	0x48, 0x68, 0x94, 0xe7, 0x5c, 0x47, 0x3a, 0xe1, 0xb9, 0x9a, 0xbb, 0x8f, 0xec, 0x23, 0x6e, 0x32,
	0xc8, 0x9b, 0xea, 0x3c, 0x62, 0x0c, 0x24, 0xe5, 0xc2, 0x4e, 0xfc, 0x61, 0xba, 0xc9, 0x12, 0x3d,
	0x1c, 0xf5, 0xfd, 0x98, 0x67, 0x94, 0x71, 0xc6, 0x97, 0x89, 0x46, 0x59, 0x61, 0xab, 0xf9, 0x78,
	0xf9, 0x20, 0xca, 0x20, 0xd0, 0xe9, 0x4c, 0x7a, 0x2f, 0xf1, 0x7a, 0x20, 0x61, 0x10, 0xc2, 0x3b,
	0x52, 0xc1, 0x4e, 0x57, 0x54, 0x51, 0x1d, 0x3d, 0x2c, 0x86, 0x4e, 0x57, 0x10, 0x17, 0x6f, 0x1c,
	0x2b, 0x90, 0x79, 0x94, 0x41, 0xd5, 0xb1, 0xdd, 0x85, 0x36, 0x5e, 0x2f, 0x52, 0xea, 0x9c, 0xcb,
	0x41, 0x75, 0x6d, 0xe6, 0x5d, 0x69, 0xef, 0x0c, 0x57, 0x02, 0x09, 0x91, 0x86, 0x19, 0x58, 0x09,
	0x42, 0xf0, 0x8d, 0x98, 0x0f, 0xc0, 0xb2, 0x0b, 0xa1, 0xad, 0x4d, 0xef, 0x34, 0x49, 0x67, 0xe4,
	0x52, 0x68, 0x6b, 0xb2, 0x8b, 0x8b, 0x20, 0x25, 0x97, 0x27, 0x99, 0x62, 0x16, 0xbb, 0xd9, 0xde,
	0xf6, 0x97, 0x3b, 0xf5, 0x9f, 0x1b, 0xf3, 0x50, 0xb1, 0x70, 0x03, 0xe6, 0x95, 0xc7, 0x70, 0x39,
	0x18, 0x42, 0x7c, 0xb6, 0xc8, 0x7a, 0x80, 0xcb, 0x12, 0x94, 0xe0, 0xb9, 0x82, 0x93, 0x95, 0xd0,
	0xd2, 0x55, 0x33, 0x30, 0xe1, 0xd7, 0x82, 0x9c, 0x7f, 0x09, 0x6a, 0x7f, 0x76, 0xf0, 0xa6, 0x09,
	0x49, 0xb4, 0xda, 0x1f, 0xe9, 0x21, 0x79, 0x8d, 0x8b, 0x8b, 0x60, 0xb2, 0xb5, 0xfa, 0xf2, 0x7c,
	0x9f, 0xee, 0xce, 0xb5, 0xe6, 0xea, 0x47, 0x7a, 0x3b, 0xef, 0xbf, 0xff, 0xfc, 0xe4, 0x6c, 0x79,
	0x15, 0x3a, 0xde, 0xa5, 0xe6, 0x80, 0x68, 0x6c, 0xfc, 0x0e, 0x6a, 0x90, 0x37, 0x18, 0x2f, 0xb7,
	0xf7, 0xdf, 0x60, 0xd7, 0x82, 0xb7, 0xbd, 0x5b, 0x4b, 0xb0, 0x85, 0x19, 0xf2, 0x31, 0x5e, 0x3f,
	0x00, 0xfd, 0x77, 0xac, 0xfb, 0x5b, 0x73, 0xe5, 0x0f, 0x7a, 0x77, 0x2d, 0xf7, 0x8e, 0x57, 0x5a,
	0x70, 0x19, 0xe8, 0x0e, 0x6a, 0xb4, 0xd0, 0xd3, 0x0f, 0xe8, 0xe3, 0xfe, 0x11, 0x29, 0xb4, 0xd7,
	0x5a, 0x7e, 0xbb, 0x81, 0x1c, 0xf9, 0x02, 0x7b, 0x2c, 0xec, 0x05, 0x75, 0x05, 0x72, 0x0c, 0xb2,
	0xde, 0xcd, 0x44, 0x0a, 0x1a, 0x32, 0xc8, 0x75, 0x5d, 0x82, 0xe0, 0x2a, 0xd1, 0x5c, 0x4e, 0x88,
	0x37, 0xd4, 0x5a, 0xa8, 0x0e, 0xa5, 0x2b, 0xd7, 0xab, 0xf4, 0x38, 0x1e, 0x66, 0x4f, 0x1e, 0xb7,
	0xf6, 0x68, 0xf7, 0x59, 0x70, 0x74, 0x31, 0xad, 0xa1, 0x6f, 0xd3, 0x1a, 0xfa, 0x31, 0xad, 0xa1,
	0xaf, 0x97, 0x35, 0x74, 0x71, 0x59, 0x43, 0x6f, 0x0b, 0xf6, 0x6c, 0xbf, 0x38, 0xb7, 0x7b, 0x69,
	0x34, 0x09, 0xd2, 0xc4, 0xef, 0x19, 0x7d, 0xc8, 0x07, 0xfd, 0x9b, 0xd6, 0xd9, 0xfb, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xb0, 0xcd, 0x00, 0x5e, 0x91, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CreditsAuthClient is the client API for CreditsAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CreditsAuthClient interface {
	CheckCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (*CheckCredResp, error)
	CreateCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (*CheckCredResp, error)
	GetCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (CreditsAuth_GetCredClient, error)
}

type creditsAuthClient struct {
	cc *grpc.ClientConn
}

func NewCreditsAuthClient(cc *grpc.ClientConn) CreditsAuthClient {
	return &creditsAuthClient{cc}
}

func (c *creditsAuthClient) CheckCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (*CheckCredResp, error) {
	out := new(CheckCredResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.CreditsAuth/CheckCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsAuthClient) CreateCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (*CheckCredResp, error) {
	out := new(CheckCredResp)
	err := c.cc.Invoke(ctx, "/RoomStatus.CreditsAuth/CreateCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsAuthClient) GetCred(ctx context.Context, in *CredReq, opts ...grpc.CallOption) (CreditsAuth_GetCredClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CreditsAuth_serviceDesc.Streams[0], "/RoomStatus.CreditsAuth/GetCred", opts...)
	if err != nil {
		return nil, err
	}
	x := &creditsAuthGetCredClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CreditsAuth_GetCredClient interface {
	Recv() (*CreateCredResp, error)
	grpc.ClientStream
}

type creditsAuthGetCredClient struct {
	grpc.ClientStream
}

func (x *creditsAuthGetCredClient) Recv() (*CreateCredResp, error) {
	m := new(CreateCredResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CreditsAuthServer is the server API for CreditsAuth service.
type CreditsAuthServer interface {
	CheckCred(context.Context, *CredReq) (*CheckCredResp, error)
	CreateCred(context.Context, *CredReq) (*CheckCredResp, error)
	GetCred(*CredReq, CreditsAuth_GetCredServer) error
}

// UnimplementedCreditsAuthServer can be embedded to have forward compatible implementations.
type UnimplementedCreditsAuthServer struct {
}

func (*UnimplementedCreditsAuthServer) CheckCred(ctx context.Context, req *CredReq) (*CheckCredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCred not implemented")
}
func (*UnimplementedCreditsAuthServer) CreateCred(ctx context.Context, req *CredReq) (*CheckCredResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCred not implemented")
}
func (*UnimplementedCreditsAuthServer) GetCred(req *CredReq, srv CreditsAuth_GetCredServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCred not implemented")
}

func RegisterCreditsAuthServer(s *grpc.Server, srv CreditsAuthServer) {
	s.RegisterService(&_CreditsAuth_serviceDesc, srv)
}

func _CreditsAuth_CheckCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsAuthServer).CheckCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.CreditsAuth/CheckCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsAuthServer).CheckCred(ctx, req.(*CredReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsAuth_CreateCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsAuthServer).CreateCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomStatus.CreditsAuth/CreateCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsAuthServer).CreateCred(ctx, req.(*CredReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsAuth_GetCred_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CredReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CreditsAuthServer).GetCred(m, &creditsAuthGetCredServer{stream})
}

type CreditsAuth_GetCredServer interface {
	Send(*CreateCredResp) error
	grpc.ServerStream
}

type creditsAuthGetCredServer struct {
	grpc.ServerStream
}

func (x *creditsAuthGetCredServer) Send(m *CreateCredResp) error {
	return x.ServerStream.SendMsg(m)
}

var _CreditsAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RoomStatus.CreditsAuth",
	HandlerType: (*CreditsAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCred",
			Handler:    _CreditsAuth_CheckCred_Handler,
		},
		{
			MethodName: "CreateCred",
			Handler:    _CreditsAuth_CreateCred_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCred",
			Handler:       _CreditsAuth_GetCred_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cred.proto",
}
