// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

// import "google/protobuf/empty.proto";

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xa3, 0xa8, 0xc4, 0x89, 0xb1, 0x74, 0x2f, 0x42, 0x7a, 0xcb, 0x03, 0xc4, 0xd2, 0x82,
	0x05, 0xf5, 0xd2, 0x16, 0x11, 0x25, 0x81, 0xd6, 0x92, 0x4b, 0x6e, 0x6b, 0xb2, 0x96, 0x45, 0x92,
	0x89, 0xbb, 0x5b, 0xc1, 0x57, 0xf2, 0x1d, 0x05, 0xd9, 0xa4, 0x7f, 0x48, 0xbb, 0x3d, 0xb4, 0xb7,
	0xcc, 0xfc, 0xbe, 0x6f, 0x66, 0xf8, 0xb2, 0xe0, 0x4a, 0x26, 0xbe, 0x79, 0xca, 0x82, 0x52, 0xa0,
	0x42, 0x62, 0xc7, 0x61, 0x32, 0xd1, 0x5f, 0x9e, 0x9b, 0x33, 0x29, 0xe9, 0x7c, 0x09, 0xbc, 0xab,
	0x14, 0xf3, 0x1c, 0x8b, 0xba, 0xea, 0xfd, 0x9d, 0x81, 0xf3, 0x86, 0x98, 0xcf, 0x6a, 0x33, 0x19,
	0x00, 0x8c, 0x05, 0xa3, 0x8a, 0xe9, 0x26, 0xb9, 0x09, 0x56, 0x53, 0x02, 0x5d, 0x2f, 0x09, 0xfb,
	0xf2, 0xae, 0x9b, 0xc0, 0xb7, 0xc8, 0x3d, 0x38, 0xcf, 0x4c, 0xe9, 0x22, 0xe4, 0x52, 0x1d, 0xe0,
	0xec, 0x9e, 0x90, 0xde, 0xda, 0xfb, 0x52, 0x7c, 0x20, 0x69, 0x37, 0x25, 0xe6, 0x7d, 0x03, 0x80,
	0xb8, 0xcc, 0x8e, 0x38, 0xf4, 0x71, 0x65, 0x1c, 0x53, 0x91, 0x91, 0x4e, 0x93, 0x6f, 0x88, 0x36,
	0xb7, 0x36, 0xf0, 0x29, 0x2f, 0xd5, 0x8f, 0x6f, 0x91, 0x21, 0xb8, 0x23, 0x81, 0x34, 0x4b, 0xa9,
	0x54, 0xfb, 0x8e, 0xdd, 0x9a, 0xd9, 0xd0, 0xfb, 0x16, 0x79, 0x80, 0x96, 0x4e, 0x9b, 0x89, 0x35,
	0x30, 0x0d, 0xd9, 0x6a, 0x45, 0x72, 0x5e, 0x45, 0xd5, 0x07, 0x67, 0xc6, 0x8a, 0x2c, 0xaa, 0x7f,
	0x29, 0xd9, 0x55, 0x99, 0x8e, 0xee, 0x82, 0x3d, 0x5d, 0xf0, 0x2a, 0x60, 0xd3, 0x2a, 0x83, 0xe3,
	0x0e, 0x2e, 0xa7, 0x0b, 0x9e, 0x7e, 0x4e, 0x28, 0x17, 0x87, 0x84, 0x7b, 0x0b, 0xf6, 0x2b, 0xf2,
	0x62, 0xdf, 0xa6, 0x1d, 0xc3, 0xa8, 0x93, 0x9c, 0x57, 0x0f, 0xf1, 0xf7, 0xb4, 0x1d, 0x87, 0xc9,
	0x50, 0x4a, 0xa6, 0x82, 0x4a, 0x10, 0x61, 0xf6, 0x7e, 0x51, 0xa1, 0xfe, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xeb, 0x76, 0x43, 0x57, 0xdb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomServiceClient interface {
	CreateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error)
	GetRoomList(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (RoomService_GetRoomListClient, error)
	GetRoomInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error)
	UpdateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error)
	UpdateCard(ctx context.Context, in *RoomUpdateCardReq, opts ...grpc.CallOption) (*Empty, error)
	BroadcastInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomBroadcastInfo, error)
	ServerBroadcast(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (RoomService_ServerBroadcastClient, error)
	SendMessage(ctx context.Context, in *RoomMsg, opts ...grpc.CallOption) (*Empty, error)
	QuitRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Empty, error)
	QuickPair(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error)
	JoinRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) CreateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) GetRoomList(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (RoomService_GetRoomListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RoomService_serviceDesc.Streams[0], "/ULZProto.RoomService/GetRoomList", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomServiceGetRoomListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomService_GetRoomListClient interface {
	Recv() (*Room, error)
	grpc.ClientStream
}

type roomServiceGetRoomListClient struct {
	grpc.ClientStream
}

func (x *roomServiceGetRoomListClient) Recv() (*Room, error) {
	m := new(Room)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomServiceClient) GetRoomInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/GetRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateRoom(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) UpdateCard(ctx context.Context, in *RoomUpdateCardReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) BroadcastInfo(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*RoomBroadcastInfo, error) {
	out := new(RoomBroadcastInfo)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/BroadcastInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) ServerBroadcast(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (RoomService_ServerBroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RoomService_serviceDesc.Streams[1], "/ULZProto.RoomService/ServerBroadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomServiceServerBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomService_ServerBroadcastClient interface {
	Recv() (*RoomMsg, error)
	grpc.ClientStream
}

type roomServiceServerBroadcastClient struct {
	grpc.ClientStream
}

func (x *roomServiceServerBroadcastClient) Recv() (*RoomMsg, error) {
	m := new(RoomMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomServiceClient) SendMessage(ctx context.Context, in *RoomMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QuitRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/QuitRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QuickPair(ctx context.Context, in *RoomCreateReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/QuickPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) JoinRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/ULZProto.RoomService/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
type RoomServiceServer interface {
	CreateRoom(context.Context, *RoomCreateReq) (*Room, error)
	GetRoomList(*RoomCreateReq, RoomService_GetRoomListServer) error
	GetRoomInfo(context.Context, *RoomReq) (*Room, error)
	UpdateRoom(context.Context, *RoomCreateReq) (*Room, error)
	UpdateCard(context.Context, *RoomUpdateCardReq) (*Empty, error)
	BroadcastInfo(context.Context, *RoomReq) (*RoomBroadcastInfo, error)
	ServerBroadcast(*RoomReq, RoomService_ServerBroadcastServer) error
	SendMessage(context.Context, *RoomMsg) (*Empty, error)
	QuitRoom(context.Context, *RoomReq) (*Empty, error)
	QuickPair(context.Context, *RoomCreateReq) (*Room, error)
	JoinRoom(context.Context, *RoomReq) (*Room, error)
}

// UnimplementedRoomServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (*UnimplementedRoomServiceServer) CreateRoom(ctx context.Context, req *RoomCreateReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (*UnimplementedRoomServiceServer) GetRoomList(req *RoomCreateReq, srv RoomService_GetRoomListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (*UnimplementedRoomServiceServer) GetRoomInfo(ctx context.Context, req *RoomReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (*UnimplementedRoomServiceServer) UpdateRoom(ctx context.Context, req *RoomCreateReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (*UnimplementedRoomServiceServer) UpdateCard(ctx context.Context, req *RoomUpdateCardReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (*UnimplementedRoomServiceServer) BroadcastInfo(ctx context.Context, req *RoomReq) (*RoomBroadcastInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastInfo not implemented")
}
func (*UnimplementedRoomServiceServer) ServerBroadcast(req *RoomReq, srv RoomService_ServerBroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerBroadcast not implemented")
}
func (*UnimplementedRoomServiceServer) SendMessage(ctx context.Context, req *RoomMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedRoomServiceServer) QuitRoom(ctx context.Context, req *RoomReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitRoom not implemented")
}
func (*UnimplementedRoomServiceServer) QuickPair(ctx context.Context, req *RoomCreateReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickPair not implemented")
}
func (*UnimplementedRoomServiceServer) JoinRoom(ctx context.Context, req *RoomReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}

func RegisterRoomServiceServer(s *grpc.Server, srv RoomServiceServer) {
	s.RegisterService(&_RoomService_serviceDesc, srv)
}

func _RoomService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).CreateRoom(ctx, req.(*RoomCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_GetRoomList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomCreateReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomServiceServer).GetRoomList(m, &roomServiceGetRoomListServer{stream})
}

type RoomService_GetRoomListServer interface {
	Send(*Room) error
	grpc.ServerStream
}

type roomServiceGetRoomListServer struct {
	grpc.ServerStream
}

func (x *roomServiceGetRoomListServer) Send(m *Room) error {
	return x.ServerStream.SendMsg(m)
}

func _RoomService_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).GetRoomInfo(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateRoom(ctx, req.(*RoomCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUpdateCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).UpdateCard(ctx, req.(*RoomUpdateCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_BroadcastInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).BroadcastInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/BroadcastInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).BroadcastInfo(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_ServerBroadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomServiceServer).ServerBroadcast(m, &roomServiceServerBroadcastServer{stream})
}

type RoomService_ServerBroadcastServer interface {
	Send(*RoomMsg) error
	grpc.ServerStream
}

type roomServiceServerBroadcastServer struct {
	grpc.ServerStream
}

func (x *roomServiceServerBroadcastServer) Send(m *RoomMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _RoomService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).SendMessage(ctx, req.(*RoomMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QuitRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QuitRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/QuitRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QuitRoom(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QuickPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QuickPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/QuickPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QuickPair(ctx, req.(*RoomCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ULZProto.RoomService/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).JoinRoom(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ULZProto.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _RoomService_GetRoomInfo_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _RoomService_UpdateRoom_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _RoomService_UpdateCard_Handler,
		},
		{
			MethodName: "BroadcastInfo",
			Handler:    _RoomService_BroadcastInfo_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _RoomService_SendMessage_Handler,
		},
		{
			MethodName: "QuitRoom",
			Handler:    _RoomService_QuitRoom_Handler,
		},
		{
			MethodName: "QuickPair",
			Handler:    _RoomService_QuickPair_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _RoomService_JoinRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRoomList",
			Handler:       _RoomService_GetRoomList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerBroadcast",
			Handler:       _RoomService_ServerBroadcast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
